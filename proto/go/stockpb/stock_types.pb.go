// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.3
// source: stock_types.proto

package stockpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TaxMethod int32

const (
	TaxMethod_FIFO     TaxMethod = 0
	TaxMethod_LIFO     TaxMethod = 1
	TaxMethod_MAX_LOSS TaxMethod = 2
	TaxMethod_MIN_GAIN TaxMethod = 3
	TaxMethod_MIN_CGT  TaxMethod = 4
)

// Enum value maps for TaxMethod.
var (
	TaxMethod_name = map[int32]string{
		0: "FIFO",
		1: "LIFO",
		2: "MAX_LOSS",
		3: "MIN_GAIN",
		4: "MIN_CGT",
	}
	TaxMethod_value = map[string]int32{
		"FIFO":     0,
		"LIFO":     1,
		"MAX_LOSS": 2,
		"MIN_GAIN": 3,
		"MIN_CGT":  4,
	}
)

func (x TaxMethod) Enum() *TaxMethod {
	p := new(TaxMethod)
	*p = x
	return p
}

func (x TaxMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaxMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_stock_types_proto_enumTypes[0].Descriptor()
}

func (TaxMethod) Type() protoreflect.EnumType {
	return &file_stock_types_proto_enumTypes[0]
}

func (x TaxMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaxMethod.Descriptor instead.
func (TaxMethod) EnumDescriptor() ([]byte, []int) {
	return file_stock_types_proto_rawDescGZIP(), []int{0}
}

type TransactionType int32

const (
	TransactionType_BUY  TransactionType = 0
	TransactionType_SELL TransactionType = 1
)

// Enum value maps for TransactionType.
var (
	TransactionType_name = map[int32]string{
		0: "BUY",
		1: "SELL",
	}
	TransactionType_value = map[string]int32{
		"BUY":  0,
		"SELL": 1,
	}
)

func (x TransactionType) Enum() *TransactionType {
	p := new(TransactionType)
	*p = x
	return p
}

func (x TransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_stock_types_proto_enumTypes[1].Descriptor()
}

func (TransactionType) Type() protoreflect.EnumType {
	return &file_stock_types_proto_enumTypes[1]
}

func (x TransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionType.Descriptor instead.
func (TransactionType) EnumDescriptor() ([]byte, []int) {
	return file_stock_types_proto_rawDescGZIP(), []int{1}
}

type StockPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker     string  `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Quantity   float64 `protobuf:"fixed64,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	NetSpend   float64 `protobuf:"fixed64,3,opt,name=net_spend,json=netSpend,proto3" json:"net_spend,omitempty"`
	SoldProfit float64 `protobuf:"fixed64,4,opt,name=sold_profit,json=soldProfit,proto3" json:"sold_profit,omitempty"`
	CgtProfit  float64 `protobuf:"fixed64,5,opt,name=cgt_profit,json=cgtProfit,proto3" json:"cgt_profit,omitempty"`
	Buys       []*Buy  `protobuf:"bytes,6,rep,name=buys,proto3" json:"buys,omitempty"`
	Sells      []*Sell `protobuf:"bytes,7,rep,name=sells,proto3" json:"sells,omitempty"`
}

func (x *StockPosition) Reset() {
	*x = StockPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockPosition) ProtoMessage() {}

func (x *StockPosition) ProtoReflect() protoreflect.Message {
	mi := &file_stock_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockPosition.ProtoReflect.Descriptor instead.
func (*StockPosition) Descriptor() ([]byte, []int) {
	return file_stock_types_proto_rawDescGZIP(), []int{0}
}

func (x *StockPosition) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *StockPosition) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *StockPosition) GetNetSpend() float64 {
	if x != nil {
		return x.NetSpend
	}
	return 0
}

func (x *StockPosition) GetSoldProfit() float64 {
	if x != nil {
		return x.SoldProfit
	}
	return 0
}

func (x *StockPosition) GetCgtProfit() float64 {
	if x != nil {
		return x.CgtProfit
	}
	return 0
}

func (x *StockPosition) GetBuys() []*Buy {
	if x != nil {
		return x.Buys
	}
	return nil
}

func (x *StockPosition) GetSells() []*Sell {
	if x != nil {
		return x.Sells
	}
	return nil
}

type Buy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction  *Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	QuantityLeft float64      `protobuf:"fixed64,2,opt,name=quantity_left,json=quantityLeft,proto3" json:"quantity_left,omitempty"`
}

func (x *Buy) Reset() {
	*x = Buy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Buy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Buy) ProtoMessage() {}

func (x *Buy) ProtoReflect() protoreflect.Message {
	mi := &file_stock_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Buy.ProtoReflect.Descriptor instead.
func (*Buy) Descriptor() ([]byte, []int) {
	return file_stock_types_proto_rawDescGZIP(), []int{1}
}

func (x *Buy) GetTransaction() *Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *Buy) GetQuantityLeft() float64 {
	if x != nil {
		return x.QuantityLeft
	}
	return 0
}

type Sell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction *Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	TaxMethod   TaxMethod    `protobuf:"varint,2,opt,name=tax_method,json=taxMethod,proto3,enum=stock.TaxMethod" json:"tax_method,omitempty"`
	Profit      float64      `protobuf:"fixed64,3,opt,name=profit,proto3" json:"profit,omitempty"`
	CgtProfit   float64      `protobuf:"fixed64,4,opt,name=cgt_profit,json=cgtProfit,proto3" json:"cgt_profit,omitempty"`
	BuysSold    []*BuySold   `protobuf:"bytes,5,rep,name=buys_sold,json=buysSold,proto3" json:"buys_sold,omitempty"`
}

func (x *Sell) Reset() {
	*x = Sell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sell) ProtoMessage() {}

func (x *Sell) ProtoReflect() protoreflect.Message {
	mi := &file_stock_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sell.ProtoReflect.Descriptor instead.
func (*Sell) Descriptor() ([]byte, []int) {
	return file_stock_types_proto_rawDescGZIP(), []int{2}
}

func (x *Sell) GetTransaction() *Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *Sell) GetTaxMethod() TaxMethod {
	if x != nil {
		return x.TaxMethod
	}
	return TaxMethod_FIFO
}

func (x *Sell) GetProfit() float64 {
	if x != nil {
		return x.Profit
	}
	return 0
}

func (x *Sell) GetCgtProfit() float64 {
	if x != nil {
		return x.CgtProfit
	}
	return 0
}

func (x *Sell) GetBuysSold() []*BuySold {
	if x != nil {
		return x.BuysSold
	}
	return nil
}

type BuySold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuyId    string  `protobuf:"bytes,1,opt,name=Buy_id,json=BuyId,proto3" json:"Buy_id,omitempty"`
	Quantity float64 `protobuf:"fixed64,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (x *BuySold) Reset() {
	*x = BuySold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuySold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuySold) ProtoMessage() {}

func (x *BuySold) ProtoReflect() protoreflect.Message {
	mi := &file_stock_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuySold.ProtoReflect.Descriptor instead.
func (*BuySold) Descriptor() ([]byte, []int) {
	return file_stock_types_proto_rawDescGZIP(), []int{3}
}

func (x *BuySold) GetBuyId() string {
	if x != nil {
		return x.BuyId
	}
	return ""
}

func (x *BuySold) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Ticker       string                 `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Currency     string                 `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	Date         *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
	Type         TransactionType        `protobuf:"varint,5,opt,name=type,proto3,enum=stock.TransactionType" json:"type,omitempty"`
	Quantity     float64                `protobuf:"fixed64,6,opt,name=quantity,proto3" json:"quantity,omitempty"`
	TradePrice   float64                `protobuf:"fixed64,7,opt,name=trade_price,json=tradePrice,proto3" json:"trade_price,omitempty"`
	RealPrice    float64                `protobuf:"fixed64,8,opt,name=real_price,json=realPrice,proto3" json:"real_price,omitempty"`
	Proceeds     float64                `protobuf:"fixed64,9,opt,name=proceeds,proto3" json:"proceeds,omitempty"`
	BrokerageFee float64                `protobuf:"fixed64,10,opt,name=brokerage_fee,json=brokerageFee,proto3" json:"brokerage_fee,omitempty"`
	Basis        float64                `protobuf:"fixed64,11,opt,name=basis,proto3" json:"basis,omitempty"`
	BrokerProfit float64                `protobuf:"fixed64,12,opt,name=broker_profit,json=brokerProfit,proto3" json:"broker_profit,omitempty"`
	UsdAud       float64                `protobuf:"fixed64,13,opt,name=usd_aud,json=usdAud,proto3" json:"usd_aud,omitempty"`
	SplitFactor  float64                `protobuf:"fixed64,14,opt,name=split_factor,json=splitFactor,proto3" json:"split_factor,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_stock_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_stock_types_proto_rawDescGZIP(), []int{4}
}

func (x *Transaction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Transaction) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *Transaction) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Transaction) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *Transaction) GetType() TransactionType {
	if x != nil {
		return x.Type
	}
	return TransactionType_BUY
}

func (x *Transaction) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *Transaction) GetTradePrice() float64 {
	if x != nil {
		return x.TradePrice
	}
	return 0
}

func (x *Transaction) GetRealPrice() float64 {
	if x != nil {
		return x.RealPrice
	}
	return 0
}

func (x *Transaction) GetProceeds() float64 {
	if x != nil {
		return x.Proceeds
	}
	return 0
}

func (x *Transaction) GetBrokerageFee() float64 {
	if x != nil {
		return x.BrokerageFee
	}
	return 0
}

func (x *Transaction) GetBasis() float64 {
	if x != nil {
		return x.Basis
	}
	return 0
}

func (x *Transaction) GetBrokerProfit() float64 {
	if x != nil {
		return x.BrokerProfit
	}
	return 0
}

func (x *Transaction) GetUsdAud() float64 {
	if x != nil {
		return x.UsdAud
	}
	return 0
}

func (x *Transaction) GetSplitFactor() float64 {
	if x != nil {
		return x.SplitFactor
	}
	return 0
}

type TaxEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date         *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Ticker       string                 `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Profit       float64                `protobuf:"fixed64,3,opt,name=profit,proto3" json:"profit,omitempty"`
	ProfitAud    float64                `protobuf:"fixed64,4,opt,name=profit_aud,json=profitAud,proto3" json:"profit_aud,omitempty"`
	CgtProfit    float64                `protobuf:"fixed64,5,opt,name=cgt_profit,json=cgtProfit,proto3" json:"cgt_profit,omitempty"`
	CgtProfitAud float64                `protobuf:"fixed64,6,opt,name=cgt_profit_aud,json=cgtProfitAud,proto3" json:"cgt_profit_aud,omitempty"`
}

func (x *TaxEvent) Reset() {
	*x = TaxEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaxEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxEvent) ProtoMessage() {}

func (x *TaxEvent) ProtoReflect() protoreflect.Message {
	mi := &file_stock_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxEvent.ProtoReflect.Descriptor instead.
func (*TaxEvent) Descriptor() ([]byte, []int) {
	return file_stock_types_proto_rawDescGZIP(), []int{5}
}

func (x *TaxEvent) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *TaxEvent) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *TaxEvent) GetProfit() float64 {
	if x != nil {
		return x.Profit
	}
	return 0
}

func (x *TaxEvent) GetProfitAud() float64 {
	if x != nil {
		return x.ProfitAud
	}
	return 0
}

func (x *TaxEvent) GetCgtProfit() float64 {
	if x != nil {
		return x.CgtProfit
	}
	return 0
}

func (x *TaxEvent) GetCgtProfitAud() float64 {
	if x != nil {
		return x.CgtProfitAud
	}
	return 0
}

type StockTax struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker          string      `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	NetProfitCgt    float64     `protobuf:"fixed64,2,opt,name=net_profit_cgt,json=netProfitCgt,proto3" json:"net_profit_cgt,omitempty"`
	NetProfitCgtAud float64     `protobuf:"fixed64,3,opt,name=net_profit_cgt_aud,json=netProfitCgtAud,proto3" json:"net_profit_cgt_aud,omitempty"`
	NetProfit       float64     `protobuf:"fixed64,4,opt,name=net_profit,json=netProfit,proto3" json:"net_profit,omitempty"`
	NetProfitAud    float64     `protobuf:"fixed64,5,opt,name=net_profit_aud,json=netProfitAud,proto3" json:"net_profit_aud,omitempty"`
	GainsCgt        float64     `protobuf:"fixed64,6,opt,name=gains_cgt,json=gainsCgt,proto3" json:"gains_cgt,omitempty"`
	GainsCgtAud     float64     `protobuf:"fixed64,7,opt,name=gains_cgt_aud,json=gainsCgtAud,proto3" json:"gains_cgt_aud,omitempty"`
	Gains           float64     `protobuf:"fixed64,8,opt,name=gains,proto3" json:"gains,omitempty"`
	Losses          float64     `protobuf:"fixed64,9,opt,name=losses,proto3" json:"losses,omitempty"`
	Events          []*TaxEvent `protobuf:"bytes,10,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *StockTax) Reset() {
	*x = StockTax{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockTax) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockTax) ProtoMessage() {}

func (x *StockTax) ProtoReflect() protoreflect.Message {
	mi := &file_stock_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockTax.ProtoReflect.Descriptor instead.
func (*StockTax) Descriptor() ([]byte, []int) {
	return file_stock_types_proto_rawDescGZIP(), []int{6}
}

func (x *StockTax) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *StockTax) GetNetProfitCgt() float64 {
	if x != nil {
		return x.NetProfitCgt
	}
	return 0
}

func (x *StockTax) GetNetProfitCgtAud() float64 {
	if x != nil {
		return x.NetProfitCgtAud
	}
	return 0
}

func (x *StockTax) GetNetProfit() float64 {
	if x != nil {
		return x.NetProfit
	}
	return 0
}

func (x *StockTax) GetNetProfitAud() float64 {
	if x != nil {
		return x.NetProfitAud
	}
	return 0
}

func (x *StockTax) GetGainsCgt() float64 {
	if x != nil {
		return x.GainsCgt
	}
	return 0
}

func (x *StockTax) GetGainsCgtAud() float64 {
	if x != nil {
		return x.GainsCgtAud
	}
	return 0
}

func (x *StockTax) GetGains() float64 {
	if x != nil {
		return x.Gains
	}
	return 0
}

func (x *StockTax) GetLosses() float64 {
	if x != nil {
		return x.Losses
	}
	return 0
}

func (x *StockTax) GetEvents() []*TaxEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

var File_stock_types_proto protoreflect.FileDescriptor

var file_stock_types_proto_rawDesc = []byte{
	0x0a, 0x11, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe3, 0x01, 0x0a, 0x0d,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x67, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x67, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x1e,
	0x0a, 0x04, 0x62, 0x75, 0x79, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x42, 0x75, 0x79, 0x52, 0x04, 0x62, 0x75, 0x79, 0x73, 0x12, 0x21,
	0x0a, 0x05, 0x73, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x52, 0x05, 0x73, 0x65, 0x6c, 0x6c,
	0x73, 0x22, 0x60, 0x0a, 0x03, 0x42, 0x75, 0x79, 0x12, 0x34, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c,
	0x65, 0x66, 0x74, 0x22, 0xd1, 0x01, 0x0a, 0x04, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x34, 0x0a, 0x0b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x0a, 0x74, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x54,
	0x61, 0x78, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x09, 0x74, 0x61, 0x78, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x67, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x63, 0x67, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x2b, 0x0a, 0x09, 0x62, 0x75,
	0x79, 0x73, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x42, 0x75, 0x79, 0x53, 0x6f, 0x6c, 0x64, 0x52, 0x08, 0x62,
	0x75, 0x79, 0x73, 0x53, 0x6f, 0x6c, 0x64, 0x22, 0x3c, 0x0a, 0x07, 0x42, 0x75, 0x79, 0x53, 0x6f,
	0x6c, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x42, 0x75, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x42, 0x75, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xc1, 0x03, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x65, 0x64, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x65, 0x64, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x46,
	0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x61, 0x73, 0x69, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x62, 0x61, 0x73, 0x69, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x64, 0x5f, 0x61, 0x75, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x75, 0x73, 0x64, 0x41, 0x75, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xce, 0x01, 0x0a, 0x08, 0x54, 0x61,
	0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x5f, 0x61, 0x75, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x41, 0x75, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x67, 0x74, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x67, 0x74, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x67, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x5f, 0x61, 0x75, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x67,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x41, 0x75, 0x64, 0x22, 0xd2, 0x02, 0x0a, 0x08, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12,
	0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x63, 0x67,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6e, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x43, 0x67, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x5f, 0x63, 0x67, 0x74, 0x5f, 0x61, 0x75, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x43, 0x67, 0x74, 0x41,
	0x75, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f,
	0x61, 0x75, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6e, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x41, 0x75, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x69, 0x6e, 0x73,
	0x5f, 0x63, 0x67, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x67, 0x61, 0x69, 0x6e,
	0x73, 0x43, 0x67, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x63, 0x67,
	0x74, 0x5f, 0x61, 0x75, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x67, 0x61, 0x69,
	0x6e, 0x73, 0x43, 0x67, 0x74, 0x41, 0x75, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x61, 0x69, 0x6e,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x6c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x54,
	0x61, 0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2a,
	0x48, 0x0a, 0x09, 0x54, 0x61, 0x78, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x08, 0x0a, 0x04,
	0x46, 0x49, 0x46, 0x4f, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x49, 0x46, 0x4f, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x41, 0x58, 0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x4d, 0x49, 0x4e, 0x5f, 0x47, 0x41, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07,
	0x4d, 0x49, 0x4e, 0x5f, 0x43, 0x47, 0x54, 0x10, 0x04, 0x2a, 0x24, 0x0a, 0x0f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03,
	0x42, 0x55, 0x59, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x01, 0x42,
	0x0c, 0x5a, 0x0a, 0x67, 0x6f, 0x2f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_stock_types_proto_rawDescOnce sync.Once
	file_stock_types_proto_rawDescData = file_stock_types_proto_rawDesc
)

func file_stock_types_proto_rawDescGZIP() []byte {
	file_stock_types_proto_rawDescOnce.Do(func() {
		file_stock_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_stock_types_proto_rawDescData)
	})
	return file_stock_types_proto_rawDescData
}

var file_stock_types_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_stock_types_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_stock_types_proto_goTypes = []interface{}{
	(TaxMethod)(0),                // 0: stock.TaxMethod
	(TransactionType)(0),          // 1: stock.TransactionType
	(*StockPosition)(nil),         // 2: stock.StockPosition
	(*Buy)(nil),                   // 3: stock.Buy
	(*Sell)(nil),                  // 4: stock.Sell
	(*BuySold)(nil),               // 5: stock.BuySold
	(*Transaction)(nil),           // 6: stock.Transaction
	(*TaxEvent)(nil),              // 7: stock.TaxEvent
	(*StockTax)(nil),              // 8: stock.StockTax
	(*timestamppb.Timestamp)(nil), // 9: google.protobuf.Timestamp
}
var file_stock_types_proto_depIdxs = []int32{
	3,  // 0: stock.StockPosition.buys:type_name -> stock.Buy
	4,  // 1: stock.StockPosition.sells:type_name -> stock.Sell
	6,  // 2: stock.Buy.transaction:type_name -> stock.Transaction
	6,  // 3: stock.Sell.transaction:type_name -> stock.Transaction
	0,  // 4: stock.Sell.tax_method:type_name -> stock.TaxMethod
	5,  // 5: stock.Sell.buys_sold:type_name -> stock.BuySold
	9,  // 6: stock.Transaction.date:type_name -> google.protobuf.Timestamp
	1,  // 7: stock.Transaction.type:type_name -> stock.TransactionType
	9,  // 8: stock.TaxEvent.date:type_name -> google.protobuf.Timestamp
	7,  // 9: stock.StockTax.events:type_name -> stock.TaxEvent
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_stock_types_proto_init() }
func file_stock_types_proto_init() {
	if File_stock_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_stock_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Buy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuySold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaxEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockTax); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stock_types_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_stock_types_proto_goTypes,
		DependencyIndexes: file_stock_types_proto_depIdxs,
		EnumInfos:         file_stock_types_proto_enumTypes,
		MessageInfos:      file_stock_types_proto_msgTypes,
	}.Build()
	File_stock_types_proto = out.File
	file_stock_types_proto_rawDesc = nil
	file_stock_types_proto_goTypes = nil
	file_stock_types_proto_depIdxs = nil
}
